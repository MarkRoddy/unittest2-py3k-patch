Index: unittest2-py3k/unittest2/test/test_suite.py
===================================================================
--- unittest2-py3k/unittest2/test/test_suite.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_suite.py	(working copy)
@@ -1,4 +1,4 @@
-import unittest
+import unittest2 as unittest
 
 import sys
 from .support import LoggingResult, TestEquality
Index: unittest2-py3k/unittest2/test/test_assertions.py
===================================================================
--- unittest2-py3k/unittest2/test/test_assertions.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_assertions.py	(working copy)
@@ -1,6 +1,6 @@
 import datetime
 
-import unittest
+import unittest2 as unittest
 
 
 class Test_Assertions(unittest.TestCase):
Index: unittest2-py3k/unittest2/test/test_loader.py
===================================================================
--- unittest2-py3k/unittest2/test/test_loader.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_loader.py	(working copy)
@@ -2,7 +2,7 @@
 import types
 
 
-import unittest
+import unittest2 as unittest
 
 
 class Test_TestLoader(unittest.TestCase):
Index: unittest2-py3k/unittest2/test/test_discovery.py
===================================================================
--- unittest2-py3k/unittest2/test/test_discovery.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_discovery.py	(working copy)
@@ -2,7 +2,7 @@
 import re
 import sys
 
-import unittest
+import unittest2 as unittest
 
 
 class TestableTestProgram(unittest.TestProgram):
Index: unittest2-py3k/unittest2/test/test_program.py
===================================================================
--- unittest2-py3k/unittest2/test/test_program.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_program.py	(working copy)
@@ -2,7 +2,7 @@
 
 import os
 import sys
-import unittest
+import unittest2 as unittest
 
 
 class Test_TestProgram(unittest.TestCase):
@@ -19,7 +19,7 @@
             self.assertEqual(start_dir, expectedPath)
             return tests
         loader._find_tests = _find_tests
-        suite = loader.discover('unittest.test')
+        suite = loader.discover('unittest2.test')
         self.assertTrue(self.wasRun)
         self.assertEqual(suite._tests, tests)
 
@@ -231,7 +231,7 @@
         self.assertIs(program.result, RESULT)
 
     def testCatchBreakInstallsHandler(self):
-        module = sys.modules['unittest.main']
+        module = sys.modules['unittest2.main']
         original = module.installHandler
         def restore():
             module.installHandler = original
Index: unittest2-py3k/unittest2/test/test_runner.py
===================================================================
--- unittest2-py3k/unittest2/test/test_runner.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_runner.py	(working copy)
@@ -1,7 +1,8 @@
 import io
 import pickle
+import sys
 
-import unittest
+import unittest2 as unittest
 
 from .support import LoggingResult, ResultWithNoStartTestRunStopTestRun
 
@@ -221,6 +222,8 @@
         expected = ['startTestRun', 'stopTestRun']
         self.assertEqual(events, expected)
 
+    @unittest.skipIf(sys.version_info[:2] < (3, 2), 
+                      "io.StringIO() not pickleable until Python 3.2")
     def test_pickle_unpickle(self):
         # Issue #7197: a TextTestRunner should be (un)pickleable. This is
         # required by test_multiprocessing under Windows (in verbose mode).
Index: unittest2-py3k/unittest2/test/test_case.py
===================================================================
--- unittest2-py3k/unittest2/test/test_case.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_case.py	(working copy)
@@ -9,7 +9,7 @@
 from copy import deepcopy
 from test import support
 
-import unittest
+import unittest2 as unittest
 
 from .support import (
     TestEquality, TestHashing, LoggingResult,
Index: unittest2-py3k/unittest2/test/support.py
===================================================================
--- unittest2-py3k/unittest2/test/support.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/support.py	(working copy)
@@ -1,4 +1,4 @@
-import unittest
+import unittest2 as unittest
 
 
 class TestEquality(object):
Index: unittest2-py3k/unittest2/test/test_result.py
===================================================================
--- unittest2-py3k/unittest2/test/test_result.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_result.py	(working copy)
@@ -5,7 +5,7 @@
 from test import support
 
 import traceback
-import unittest
+import unittest2 as unittest
 
 
 class Test_TestResult(unittest.TestCase):
Index: unittest2-py3k/unittest2/test/test_functiontestcase.py
===================================================================
--- unittest2-py3k/unittest2/test/test_functiontestcase.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_functiontestcase.py	(working copy)
@@ -1,4 +1,4 @@
-import unittest
+import unittest2 as unittest
 
 from .support import LoggingResult
 
Index: unittest2-py3k/unittest2/test/test_setups.py
===================================================================
--- unittest2-py3k/unittest2/test/test_setups.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_setups.py	(working copy)
@@ -1,7 +1,7 @@
 import io
 import sys
 
-import unittest
+import unittest2 as unittest
 
 
 def resultFactory(*_):
Index: unittest2-py3k/unittest2/test/test_break.py
===================================================================
--- unittest2-py3k/unittest2/test/test_break.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_break.py	(working copy)
@@ -5,7 +5,7 @@
 import signal
 import weakref
 
-import unittest
+import unittest2 as unittest
 
 
 @unittest.skipUnless(hasattr(os, 'kill'), "Test requires os.kill")
Index: unittest2-py3k/unittest2/test/test_skipping.py
===================================================================
--- unittest2-py3k/unittest2/test/test_skipping.py	(revision 86724)
+++ unittest2-py3k/unittest2/test/test_skipping.py	(working copy)
@@ -1,4 +1,4 @@
-import unittest
+import unittest2 as unittest
 
 from .support import LoggingResult
 
Index: unittest2-py3k/unittest2/compatibility.py
===================================================================
--- unittest2-py3k/unittest2/compatibility.py	(revision 0)
+++ unittest2-py3k/unittest2/compatibility.py	(revision 0)
@@ -0,0 +1,25 @@
+try:
+    from functools import cmp_to_key
+except ImportError:
+    # Python 3.0 / 3.1
+    def cmp_to_key(mycmp):
+        """Convert a cmp= function into a key= function"""
+        class K(object):
+            def __init__(self, obj, *args):
+                self.obj = obj
+            def __lt__(self, other):
+                return mycmp(self.obj, other.obj) < 0
+            def __gt__(self, other):
+                return mycmp(self.obj, other.obj) > 0
+            def __eq__(self, other):
+                return mycmp(self.obj, other.obj) == 0
+            def __le__(self, other):
+                return mycmp(self.obj, other.obj) <= 0
+            def __ge__(self, other):
+                return mycmp(self.obj, other.obj) >= 0
+            def __ne__(self, other):
+                return mycmp(self.obj, other.obj) != 0
+            def __hash__(self):
+                raise TypeError('hash not implemented')
+        return K
+
Index: unittest2-py3k/unittest2/case.py
===================================================================
--- unittest2-py3k/unittest2/case.py	(revision 86724)
+++ unittest2-py3k/unittest2/case.py	(working copy)
@@ -6,6 +6,7 @@
 import pprint
 import re
 import warnings
+import unittest
 
 from . import result
 from .util import (strclass, safe_repr, sorted_list_difference,
@@ -212,7 +213,7 @@
         return default
 
 
-class TestCase(object):
+class TestCase(unittest.TestCase):
     """A class whose instances are single test cases.
 
     By default, the test code itself should be placed in a method named
Index: unittest2-py3k/unittest2/__init__.py
===================================================================
--- unittest2-py3k/unittest2/__init__.py	(revision 86724)
+++ unittest2-py3k/unittest2/__init__.py	(working copy)
@@ -9,9 +9,9 @@
 
 Simple usage:
 
-    import unittest
+    import unittest2
 
-    class IntegerArithmenticTestCase(unittest.TestCase):
+    class IntegerArithmenticTestCase(unittest2.TestCase):
         def testAdd(self):  ## test method names begin 'test*'
             self.assertEqual((1 + 2), 3)
             self.assertEqual(0 + 1, 1)
@@ -20,7 +20,7 @@
             self.assertEqual((5 * 8), 40)
 
     if __name__ == '__main__':
-        unittest.main()
+        unittest2.main()
 
 Further information is available in the bundled documentation, and from
 
Index: unittest2-py3k/unittest2/loader.py
===================================================================
--- unittest2-py3k/unittest2/loader.py	(revision 86724)
+++ unittest2-py3k/unittest2/loader.py	(working copy)
@@ -5,11 +5,12 @@
 import sys
 import traceback
 import types
-import functools
+import unittest
 
 from fnmatch import fnmatch
 
 from . import case, suite, util
+from .compatibility import cmp_to_key
 
 __unittest = True
 
@@ -142,7 +143,7 @@
         testFnNames = testFnNames = list(filter(isTestMethod,
                                                 dir(testCaseClass)))
         if self.sortTestMethodsUsing:
-            testFnNames.sort(key=functools.cmp_to_key(self.sortTestMethodsUsing))
+            testFnNames.sort(key=cmp_to_key(self.sortTestMethodsUsing))
         return testFnNames
 
     def discover(self, start_dir, pattern='test*.py', top_level_dir=None):
